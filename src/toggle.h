/*
 * Generated by gdbus-codegen 2.60.6 from dbus-interface.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#pragma once

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for lanoxx.tilda.Toggle */

#define TYPE_TOGGLE (toggle_get_type ())
#define TOGGLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_TOGGLE, Toggle))
#define IS_TOGGLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_TOGGLE))
#define TOGGLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_TOGGLE, ToggleIface))

struct _Toggle;
typedef struct _Toggle Toggle;
typedef struct _ToggleIface ToggleIface;

struct _ToggleIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_toggle) (
    Toggle *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_is_open) (Toggle *object);

  void (*toggle) (
    Toggle *object);

};

GType toggle_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *toggle_interface_info (void);
guint toggle_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void toggle_complete_toggle (
    Toggle *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void toggle_emit_toggle (
    Toggle *object);



/* D-Bus method calls: */
void toggle_call_toggle (
    Toggle *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean toggle_call_toggle_finish (
    Toggle *proxy,
    GAsyncResult *res,
    GError **error);

gboolean toggle_call_toggle_sync (
    Toggle *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean toggle_get_is_open (Toggle *object);
void toggle_set_is_open (Toggle *object, gboolean value);


/* ---- */

#define TYPE_TOGGLE_PROXY (toggle_proxy_get_type ())
#define TOGGLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_TOGGLE_PROXY, ToggleProxy))
#define TOGGLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_TOGGLE_PROXY, ToggleProxyClass))
#define TOGGLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_TOGGLE_PROXY, ToggleProxyClass))
#define IS_TOGGLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_TOGGLE_PROXY))
#define IS_TOGGLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_TOGGLE_PROXY))

typedef struct _ToggleProxy ToggleProxy;
typedef struct _ToggleProxyClass ToggleProxyClass;
typedef struct _ToggleProxyPrivate ToggleProxyPrivate;

struct _ToggleProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ToggleProxyPrivate *priv;
};

struct _ToggleProxyClass
{
  GDBusProxyClass parent_class;
};

GType toggle_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ToggleProxy, g_object_unref)
#endif

void toggle_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Toggle *toggle_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Toggle *toggle_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void toggle_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Toggle *toggle_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Toggle *toggle_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_TOGGLE_SKELETON (toggle_skeleton_get_type ())
#define TOGGLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_TOGGLE_SKELETON, ToggleSkeleton))
#define TOGGLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_TOGGLE_SKELETON, ToggleSkeletonClass))
#define TOGGLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_TOGGLE_SKELETON, ToggleSkeletonClass))
#define IS_TOGGLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_TOGGLE_SKELETON))
#define IS_TOGGLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_TOGGLE_SKELETON))

typedef struct _ToggleSkeleton ToggleSkeleton;
typedef struct _ToggleSkeletonClass ToggleSkeletonClass;
typedef struct _ToggleSkeletonPrivate ToggleSkeletonPrivate;

struct _ToggleSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ToggleSkeletonPrivate *priv;
};

struct _ToggleSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType toggle_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ToggleSkeleton, g_object_unref)
#endif

Toggle *toggle_skeleton_new (void);


G_END_DECLS
